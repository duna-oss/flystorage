name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: read # Required for change detection

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [20, 21, 22]
        experimental: [false]
        include:
          - os: ubuntu-latest
            experimental: true
            node: 23
    name: Flystorage Tests
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
#      - name: Paths Changes Filter
#        id: changes
#        uses: dorny/paths-filter@v3.0.2
#        with:
#          list-files: shell
#          filters: |
#            source:
#              - 'packages/**/*.(ts|tsx|js|jsx)'
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: ./.github/actions/install-dependencies
        name: Install NPM dependencies
        with:
          cache-key: npm-${{ matrix.os }}-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          cache-restore-keys: |
            npm-${{ matrix.os }}-${{ matrix.node }}
            npm-${{ matrix.os }}
      - name: Configure GCP access
        run: |
          echo $CONTENTS > google-cloud-service-account.json
        env:
          CONTENTS: "${{ secrets.GCS_KEY_CONTENTS }}"
      - name: Run build
        # if: steps.changes.outputs.source == 'true'
        run: npm run build:only
        shell: sh
      - name: Write JSON Payload to File on Windows
        shell: cmd
        run: npm run windows:place-commonjs-package-json -ws --if-present
        if: runner.os == 'Windows'
      - name: Run relevant tests
        # if: steps.changes.outputs.source == 'true'
        run: "npm run test"
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_REGION: "${{ secrets.AWS_REGION }}"
          AZURE_DSN: "${{ secrets.AZURE_DSN }}"
      - name: Delete GCP access
        if: always()
        run: |
          node_modules/.bin/rimraf google-cloud-service-account.json

